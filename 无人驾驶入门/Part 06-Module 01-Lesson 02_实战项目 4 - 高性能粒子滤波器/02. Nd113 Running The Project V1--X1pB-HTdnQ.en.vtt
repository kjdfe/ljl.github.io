WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.805
Hi, I'm Andrew Pastor,

00:00:02.805 --> 00:00:09.780
and I'm a Content Developer for the Intro to Self-Driving Car Nanodegree.

00:00:09.780 --> 00:00:17.445
So I wanted to do a walkthrough of the C++ optimization project.

00:00:17.445 --> 00:00:20.085
So, in this project,

00:00:20.085 --> 00:00:25.785
you're given a histogram filter code in C++ that already works.

00:00:25.785 --> 00:00:27.285
So you can run it.

00:00:27.285 --> 00:00:30.790
It runs correctly, and everything's fine.

00:00:30.790 --> 00:00:36.640
The issue with the code is that it has a lot of inefficiencies.

00:00:36.640 --> 00:00:41.410
So, everything that you've been learning in this optimization lesson,

00:00:41.410 --> 00:00:45.640
you can apply to this code and get it to run faster.

00:00:45.640 --> 00:00:51.160
And one of the fun parts about this project is that a lot of students are going

00:00:51.160 --> 00:00:53.575
on the Slack and competing with each other

00:00:53.575 --> 00:00:56.680
just to show how fast they're able to make their code.

00:00:56.680 --> 00:00:59.185
So, if you're up for the challenge,

00:00:59.185 --> 00:01:04.715
after you're finished, go on Slack and post your results in the C++ channel.

00:01:04.715 --> 00:01:08.240
I also want to mention that this project is non-graded.

00:01:08.240 --> 00:01:15.900
So it's up to you to do the project and get to the point that you want to.

00:01:15.900 --> 00:01:19.710
There's a solution that's been provided at the end that

00:01:19.710 --> 00:01:23.535
you can compare your results with but again, it's non-graded.

00:01:23.535 --> 00:01:27.786
So, let's just walk through the project and see what we've got here.

00:01:27.786 --> 00:01:29.456
When you open the project,

00:01:29.456 --> 00:01:31.140
you're going to go to this overview page,

00:01:31.140 --> 00:01:33.075
which I suggest you read through.

00:01:33.075 --> 00:01:36.998
I'm going to talk about some of the stuff today anyway,

00:01:36.998 --> 00:01:41.685
but it gives an overview of what the project is about.

00:01:41.685 --> 00:01:44.445
Then, when you click here on project code,

00:01:44.445 --> 00:01:48.000
it's going to open this embedded terminals workspace for you,

00:01:48.000 --> 00:01:52.215
and there is this instructions file already here.

00:01:52.215 --> 00:01:54.945
So what have we provided for you exactly?

00:01:54.945 --> 00:02:01.260
So, over here, we have this folder that says, "Andy_histogram_filter."

00:02:01.260 --> 00:02:04.770
And then, we have this folder, optimized_code.

00:02:04.770 --> 00:02:10.620
So, both of these folders actually contain the exact same C++ code.

00:02:10.620 --> 00:02:13.455
If you open them up, double-click on them,

00:02:13.455 --> 00:02:15.105
here are all the files.

00:02:15.105 --> 00:02:18.465
Let's go back, open the optimized_code folder,

00:02:18.465 --> 00:02:20.198
has the same exact code.

00:02:20.198 --> 00:02:23.220
The reason why we've provided it twice for you is

00:02:23.220 --> 00:02:27.135
because that way, in andy_histogram_filter,

00:02:27.135 --> 00:02:31.260
you have all of the original code and then you can

00:02:31.260 --> 00:02:35.820
put your optimized code and your changes into this optimized_code folder.

00:02:35.820 --> 00:02:39.660
So that way, you always have a copy of the original code and you

00:02:39.660 --> 00:02:43.755
have a copy of whatever changes you've made so that you can go back and compare them.

00:02:43.755 --> 00:02:49.193
We've also provided this text file called hints.md.

00:02:49.193 --> 00:02:52.970
I'm not going to open it because it's only

00:02:52.970 --> 00:02:55.100
provided if you feel like you're getting stuck and

00:02:55.100 --> 00:02:57.470
you're not sure what to do and what to optimize,

00:02:57.470 --> 00:03:02.525
but it provides extra hints for how to go about the project and

00:03:02.525 --> 00:03:07.920
how to think about what can be optimized in each of the files.

00:03:07.920 --> 00:03:10.646
So, let's just go,

00:03:10.646 --> 00:03:15.280
and we're going to open andy_histogram_filter first.

00:03:15.280 --> 00:03:18.294
So, if I open main,

00:03:18.294 --> 00:03:19.490
what do we see here?

00:03:19.490 --> 00:03:23.345
So, all of these include statements of these headers.

00:03:23.345 --> 00:03:25.690
This is the meat of it.

00:03:25.690 --> 00:03:28.852
So here we have iterations 10,000.

00:03:28.852 --> 00:03:34.090
What this is saying is that each function is going to be run 10,000 times.

00:03:34.090 --> 00:03:37.030
And we go down here.

00:03:37.030 --> 00:03:38.500
We're making this vector,

00:03:38.500 --> 00:03:42.400
which represents a robot grid which you should be familiar with.

00:03:42.400 --> 00:03:43.810
And we've said here.

00:03:43.810 --> 00:03:48.085
It's red, green, red, red, red, green, red, red, green, green, et cetera.

00:03:48.085 --> 00:03:51.070
Now, what does this code do?

00:03:51.070 --> 00:03:53.950
We have this clock that starts over again,

00:03:53.950 --> 00:03:56.035
goes through 10,000 iterations,

00:03:56.035 --> 00:03:58.315
going through the sense function,

00:03:58.315 --> 00:04:00.685
and then prints out how long it took to run that.

00:04:00.685 --> 00:04:02.970
Then, we reset the clock.

00:04:02.970 --> 00:04:05.415
We do 10,000 iterations on blur.

00:04:05.415 --> 00:04:07.275
Print out how long it took.

00:04:07.275 --> 00:04:10.530
10,000 iterations on this normalized function,

00:04:10.530 --> 00:04:13.830
how long it took. Tests out move.

00:04:13.830 --> 00:04:17.730
So you can see we're going through each of these files,

00:04:17.730 --> 00:04:20.070
where each of these files represents a function

00:04:20.070 --> 00:04:24.735
and testing how long it's taking to run those.

00:04:24.735 --> 00:04:27.690
And your job is to go into all of these files and say,

00:04:27.690 --> 00:04:29.790
"Hey, what's going on?

00:04:29.790 --> 00:04:31.320
Why is this so slow?

00:04:31.320 --> 00:04:33.585
What can we do to make it faster?"

00:04:33.585 --> 00:04:37.725
So, if you go back to the instructions file,

00:04:37.725 --> 00:04:39.500
like you've seen previously,

00:04:39.500 --> 00:04:45.750
we have given the terminal code to get everything running.

00:04:45.750 --> 00:04:50.850
So, if I go change directory, andy_histogram_filter,

00:04:50.850 --> 00:04:55.380
hit enter, and now I'm in the histogram, andy_histogram_filter folder,

00:04:55.380 --> 00:04:58.935
I'm just going to copy and paste this because it's kind of long.

00:04:58.935 --> 00:05:02.235
This is going to compile the code.

00:05:02.235 --> 00:05:07.455
Hit enter, and so you'll see over here that it's created this

00:05:07.455 --> 00:05:14.060
a.out file and then the last command./a.out,

00:05:14.060 --> 00:05:15.830
and it runs the file.

00:05:15.830 --> 00:05:17.200
So it says, "Number of iterations,

00:05:17.200 --> 00:05:21.910
10,000 duration milliseconds initialize beliefs, et cetera, et cetera."

00:05:21.910 --> 00:05:25.930
And it gives you how long it took to run each of these functions.

00:05:25.930 --> 00:05:31.105
So, let's go back here to the workspace and

00:05:31.105 --> 00:05:33.430
change to optimized code because this is where you're

00:05:33.430 --> 00:05:36.760
actually going to be writing your code and changing your files.

00:05:36.760 --> 00:05:42.775
So if you go and open initialize_beliefs,

00:05:42.775 --> 00:05:46.960
for example, you'll see we've got

00:05:46.960 --> 00:05:51.445
all of this code for already working functioning histogram filter.

00:05:51.445 --> 00:05:54.520
You don't need to actually do anything to get it to work,

00:05:54.520 --> 00:05:59.020
but you'll see that there are places where you can optimize.

00:05:59.020 --> 00:06:01.690
And what we've done is we've given some ideas

00:06:01.690 --> 00:06:06.250
for what you can do to make things faster like optimization.

00:06:06.250 --> 00:06:08.590
Which of these variables are necessary optimization,

00:06:08.590 --> 00:06:10.435
reserve space in memory for vectors?

00:06:10.435 --> 00:06:13.180
So, for example, this is just kind of a hint

00:06:13.180 --> 00:06:15.820
that maybe you don't need all the variables,

00:06:15.820 --> 00:06:20.565
maybe there's some extra variables being created that take up memory,

00:06:20.565 --> 00:06:24.620
are creating unnecessary read and writes and slowing down your program.

00:06:24.620 --> 00:06:27.320
As you saw in the lessons, reserving space in memory for

00:06:27.320 --> 00:06:29.820
vectors can make things go faster as well.

00:06:29.820 --> 00:06:32.132
So that's something to think about.

00:06:32.132 --> 00:06:36.635
Here, there's a nested for loop which we talked about in the lesson as well,

00:06:36.635 --> 00:06:39.970
the nested for loops can be pretty inefficient.

00:06:39.970 --> 00:06:42.950
So, maybe there's a way to do it with just one for loop

00:06:42.950 --> 00:06:46.475
or initializing things differently.

00:06:46.475 --> 00:06:51.975
You're going to have to read through the code and figure out what could go better,

00:06:51.975 --> 00:06:55.595
what could I do to make this run faster,

00:06:55.595 --> 00:06:58.725
what could I do so that there are

00:06:58.725 --> 00:07:04.155
fewer reads to memory and writes to memory that the CPU is asking for.

00:07:04.155 --> 00:07:10.610
So, there's actually a suggested order that you do in the project.

00:07:10.610 --> 00:07:17.310
If you go back to the overview section over here, you'll see order.

00:07:17.310 --> 00:07:18.480
As a suggestion do,

00:07:18.480 --> 00:07:21.030
the project in the following order.

00:07:21.030 --> 00:07:24.345
I highly suggest doing it in this order,

00:07:24.345 --> 00:07:27.555
starting with zeros.cpp, initialize_beliefs,

00:07:27.555 --> 00:07:30.165
sense, blur, normalized, move.

00:07:30.165 --> 00:07:34.770
The reasoning behind this zeros.cpp, I think,

00:07:34.770 --> 00:07:40.950
is one of the quickest optimizations and it doesn't have too much code.

00:07:40.950 --> 00:07:43.463
So it's kind of a good warm up.

00:07:43.463 --> 00:07:48.030
The other files, we've put in this order because this

00:07:48.030 --> 00:07:52.755
is the order in which they get called in main.cpp and some of these functions.

00:07:52.755 --> 00:07:55.690
Now, I use some of the other functions.

00:07:55.690 --> 00:07:58.350
So, as you say,

00:07:58.350 --> 00:08:01.020
first start with zeros.cpp.

00:08:01.020 --> 00:08:04.410
I believe blur.cpp uses zeros.cpp.

00:08:04.410 --> 00:08:06.450
So, if you've already optimize here,

00:08:06.450 --> 00:08:09.330
your blur should already start to run faster.

00:08:09.330 --> 00:08:13.160
So let's go back to the project code for a second.

00:08:13.160 --> 00:08:18.460
So your main process for tackling all of this is going to be the following.

00:08:18.460 --> 00:08:23.599
So, like I said, open zeros.cpp.

00:08:23.599 --> 00:08:28.950
So, we have zeros.cpp which is going to

00:08:28.950 --> 00:08:35.515
initialize a 2D vector that has just a bunch of zeros in it.

00:08:35.515 --> 00:08:39.900
We've said here, optimization reserved space in memory for vectors, newGrid,

00:08:39.900 --> 00:08:42.120
optimization nested for loop not

00:08:42.120 --> 00:08:44.940
needed because every row in the matrix is exactly the same.

00:08:44.940 --> 00:08:48.390
There might be other optimizations you think of as well that

00:08:48.390 --> 00:08:51.880
might get your code to be even faster than the solution we've provided.

00:08:51.880 --> 00:08:55.965
So, this is not the be-all and end-all of optimization.

00:08:55.965 --> 00:08:59.895
These are just definitely ways that you can get the code to run faster.

00:08:59.895 --> 00:09:06.840
So, I'm going to go here into the terminal and change my directory.

00:09:06.840 --> 00:09:09.750
So, all I've done here is I've changed directory.

00:09:09.750 --> 00:09:12.780
Dot dot means go. Back up one step,

00:09:12.780 --> 00:09:14.340
which takes me back to workspace.

00:09:14.340 --> 00:09:16.110
And then I say, go and optimize code.

00:09:16.110 --> 00:09:18.440
So that's what this line is doing.

00:09:18.440 --> 00:09:22.770
So now I'm in the optimize code folder,

00:09:22.770 --> 00:09:24.788
which you can see here on the left,

00:09:24.788 --> 00:09:27.495
and I have zeros.cpp open.

00:09:27.495 --> 00:09:32.265
I am going to compile the code.

00:09:32.265 --> 00:09:35.821
Let's look for that command here in the instructions.

00:09:35.821 --> 00:09:39.716
Compile it, a.out to run it.

00:09:39.716 --> 00:09:43.670
And this is the code in its natural state as given.

00:09:43.670 --> 00:09:49.720
Now, zeros.cpp doesn't show up here because a lot of these functions use it.

00:09:49.720 --> 00:09:51.935
So it's not been tested separately.

00:09:51.935 --> 00:09:54.170
By getting this to run faster,

00:09:54.170 --> 00:09:56.060
we'll get this to run faster as well.

00:09:56.060 --> 00:09:57.980
So what do we have here? We say,

00:09:57.980 --> 00:10:00.710
optimisation reserve space in memory for vectors.

00:10:00.710 --> 00:10:06.650
So, we have this height and width as our inputs,

00:10:06.650 --> 00:10:09.200
and we have newGrid and newRow.

00:10:09.200 --> 00:10:12.772
So I'm just saying here, newRow,

00:10:12.772 --> 00:10:14.380
or let's start with newGrid.

00:10:14.380 --> 00:10:18.695
We have newGrid.reserve(height).

00:10:18.695 --> 00:10:22.205
So we're saying newGrid.reserve is going to be

00:10:22.205 --> 00:10:26.743
a vector and it needs to have length of height.

00:10:26.743 --> 00:10:33.695
And then, we're going to say, newRow.reserve(width).

00:10:33.695 --> 00:10:35.990
And so, if you remember back in the lesson,

00:10:35.990 --> 00:10:39.320
the reason why this might make your code run faster is

00:10:39.320 --> 00:10:43.775
because when you create a vector in C++,

00:10:43.775 --> 00:10:46.490
it reserves a certain amount of space,

00:10:46.490 --> 00:10:51.965
but the program doesn't know in advance how much you're going to end up actually using.

00:10:51.965 --> 00:10:56.270
So, if you go past the reserved amount of space that C++,

00:10:56.270 --> 00:10:59.090
the compiler, automatically reserved for you,

00:10:59.090 --> 00:11:02.690
then the compiler needs to take the entire vector or find

00:11:02.690 --> 00:11:08.395
a new section of memory that's available and recopy the entire vector over,

00:11:08.395 --> 00:11:09.830
which is really inefficient.

00:11:09.830 --> 00:11:12.560
But if you know the length of your vector in advance

00:11:12.560 --> 00:11:15.630
and you reserve the amount of memory it's going to need,

00:11:15.630 --> 00:11:20.820
well, then your compiler isn't going to have to do this whole recoping step.

00:11:20.820 --> 00:11:23.025
So what are we going to do? We just made this change.

00:11:23.025 --> 00:11:26.828
And I'm thinking it's going to make the code run faster,

00:11:26.828 --> 00:11:30.255
but do I really know? I can't know for sure.

00:11:30.255 --> 00:11:31.740
I need to test it out.

00:11:31.740 --> 00:11:34.148
That's a big part of optimization.

00:11:34.148 --> 00:11:38.565
You have ideas, and you have kind of your instincts and your feelings,

00:11:38.565 --> 00:11:40.480
but instincts and feelings aren't always right.

00:11:40.480 --> 00:11:42.150
So you need to test it out.

00:11:42.150 --> 00:11:43.988
So I'm going to go back here.

00:11:43.988 --> 00:11:51.940
I'm going to use this command again to compile the code./a.out.

00:11:51.940 --> 00:11:56.130
So, now let's compare what we had before and what we have now.

00:11:56.130 --> 00:11:59.490
This whole section is what we had before we made the change,

00:11:59.490 --> 00:12:03.330
and this whole section is what we had after making the change.

00:12:03.330 --> 00:12:09.135
So, it looks like initialize_beliefs got a little bit faster,

00:12:09.135 --> 00:12:11.550
but it's not a lot faster. So, let's see.

00:12:11.550 --> 00:12:16.770
Does initialize_beliefs use zeros.cpp?

00:12:16.770 --> 00:12:19.560
It looks like it does not.

00:12:19.560 --> 00:12:24.540
So, this difference is probably just because some randomness,

00:12:24.540 --> 00:12:27.570
every time you run your code there's going to be some sort of difference.

00:12:27.570 --> 00:12:31.170
But it looks like this normalize and

00:12:31.170 --> 00:12:37.530
this move function had a relatively significant change in time.

00:12:37.530 --> 00:12:40.605
So, I'm going to open move.

00:12:40.605 --> 00:12:43.092
And hey, look here, zeros.h.

00:12:43.092 --> 00:12:45.600
That means that this is using the zeros function.

00:12:45.600 --> 00:12:53.297
And doing that really small change where we went into zeros.cpp,

00:12:53.297 --> 00:12:58.555
and we reserved space in memory in advance seems like it got

00:12:58.555 --> 00:13:04.185
us a good chunk of time off of our code.

00:13:04.185 --> 00:13:06.600
Let's just run the code again.

00:13:06.600 --> 00:13:10.440
It's sticking around 40 milliseconds here at move.

00:13:10.440 --> 00:13:14.228
So, it looks like that helped.

00:13:14.228 --> 00:13:15.480
And how cool is that? I mean,

00:13:15.480 --> 00:13:21.150
you shaved off 20 milliseconds just by reserving the space in memory in advance.

00:13:21.150 --> 00:13:26.385
And so, when the move.cpp function ends up calling your zeros function,

00:13:26.385 --> 00:13:29.295
this section of code is already running faster.

00:13:29.295 --> 00:13:34.140
I don't want to give away everything because this is a really fun projects.

00:13:34.140 --> 00:13:36.690
So I'll just going to kind of think about and just work and

00:13:36.690 --> 00:13:39.455
see what gets things faster and what doesn't,

00:13:39.455 --> 00:13:47.285
and we've also provided the hints in the hints.md file if you go back to the workspace.

00:13:47.285 --> 00:13:49.262
But that's essentially the projects.

00:13:49.262 --> 00:13:51.920
What you're going to do is go through each of

00:13:51.920 --> 00:13:57.628
these files and see what you can get to run faster.

00:13:57.628 --> 00:14:00.260
And every time you make a change, test, test, test,

00:14:00.260 --> 00:14:05.323
test because you might think something is going to make things faster,

00:14:05.323 --> 00:14:08.405
and it might be something that in the past has made something faster.

00:14:08.405 --> 00:14:10.355
But every code is different.

00:14:10.355 --> 00:14:12.065
Every machine is different.

00:14:12.065 --> 00:14:15.335
So it's really, really important to test.

00:14:15.335 --> 00:14:19.678
If you don't test,

00:14:19.678 --> 00:14:22.895
you might end up doing something that

00:14:22.895 --> 00:14:26.750
makes your code slower and then doing something else that makes it faster,

00:14:26.750 --> 00:14:29.510
and you don't realize that your code is not as efficient as it could be.

00:14:29.510 --> 00:14:31.115
So, test, test, test.

00:14:31.115 --> 00:14:37.308
The other thing I just want to mention here is that, so, blur, initialize,

00:14:37.308 --> 00:14:41.210
move, normalize, sense, and zeros,

00:14:41.210 --> 00:14:44.990
all of those files have places that you can optimize.

00:14:44.990 --> 00:14:47.456
So, print.cpp and main.cpp,

00:14:47.456 --> 00:14:49.765
you do not need to change.

00:14:49.765 --> 00:14:52.530
Main.cpp just runs your code and

00:14:52.530 --> 00:14:55.875
prints out how long it's taking to do as I explained before.

00:14:55.875 --> 00:15:01.920
Print.cpp, it's just included here if you want to use it to debug.

00:15:01.920 --> 00:15:04.103
It has two functions in here.

00:15:04.103 --> 00:15:08.768
One is print_vector_float, and one is print_vector_char.

00:15:08.768 --> 00:15:10.380
And the reason these two different functions are

00:15:10.380 --> 00:15:13.950
provided is in case you want to print out your 2D vectors.

00:15:13.950 --> 00:15:18.120
We wrote the code for you so that you don't have to do it over again,

00:15:18.120 --> 00:15:21.120
but it'll be your responsibility to put in

00:15:21.120 --> 00:15:23.865
the header files correctly and put them in the right place.

00:15:23.865 --> 00:15:28.965
And again, each of these files has ideas about what can be optimized,

00:15:28.965 --> 00:15:31.530
and you might come up with other ideas as well.

00:15:31.530 --> 00:15:36.810
If you go back to the workspace folder, actually,

00:15:36.810 --> 00:15:38.590
if you go back here on top,

00:15:38.590 --> 00:15:42.960
notice we've also provided this pages as projects solution.

00:15:42.960 --> 00:15:46.635
In the next section, we are providing a solution to the code optimization project.

00:15:46.635 --> 00:15:48.480
Each file contains comments noting what

00:15:48.480 --> 00:15:51.105
changes have been made to make the code run faster.

00:15:51.105 --> 00:15:53.505
So, again, this is up to you.

00:15:53.505 --> 00:15:57.060
We suggest that you do everything on your own without looking at

00:15:57.060 --> 00:16:01.200
the solution code until you're satisfied that your code is running quickly,

00:16:01.200 --> 00:16:04.688
but we have provided a solution.

00:16:04.688 --> 00:16:07.316
Our solution is not necessarily the fastest,

00:16:07.316 --> 00:16:09.045
fastest, fastest thing possible,

00:16:09.045 --> 00:16:15.795
but it shows what we were able to come up with based on what was taught in the lesson.

00:16:15.795 --> 00:16:21.440
The other thing I want to mention again is going to the C++ Slack channel.

00:16:21.440 --> 00:16:25.101
Once you have completed the project,

00:16:25.101 --> 00:16:29.070
it's a lot of fun to post your results up there and compare your results with

00:16:29.070 --> 00:16:34.335
other students and even get suggestions for what can run faster.

00:16:34.335 --> 00:16:36.990
So, hopefully, after you've finish this project,

00:16:36.990 --> 00:16:41.385
you'll have a real appreciation and understanding

00:16:41.385 --> 00:16:46.920
about how you can take this sort of inefficient code

00:16:46.920 --> 00:16:50.625
here in andy_histogram_filter and go to

00:16:50.625 --> 00:16:54.930
optimized code here and make kind of small changes

00:16:54.930 --> 00:16:58.770
and get your code to run a lot faster just based on

00:16:58.770 --> 00:17:04.110
your knowledge of what the CPU is doing and how it uses RAM.

