WEBVTT
Kind: captions
Language: ja

00:00:00.020 --> 00:00:03.440
どの問題でもまず考える必要があるのは
入力は何かということです

00:00:03.440 --> 00:00:05.470
この問題ではかなり明確に

00:00:05.470 --> 00:00:07.939
“自分の誕生日と現在の日付”と示されています

00:00:07.939 --> 00:00:11.670
つまり入力です
これをきちんと満たす入力セットは何でしょうか？

00:00:11.670 --> 00:00:14.710
私の誕生日だけでしょうか？　そして今日の日付？

00:00:14.710 --> 00:00:17.850
もしそれだけでいいならすぐに分かります

00:00:17.850 --> 00:00:19.680
実際は関数を書く必要はありません

00:00:19.680 --> 00:00:23.520
これが意図するものははるかに一般的でしょう

00:00:23.520 --> 00:00:24.920
確かに入力は2つの日付ですが

00:00:24.920 --> 00:00:28.390
これは入力の種類
つまり考えられるすべての入力セットを意図します

00:00:28.390 --> 00:00:31.180
これがすべて有効であるかを
もう少し慎重に考える必要があります

00:00:31.180 --> 00:00:33.960
問題文によいヒントがあります

00:00:33.960 --> 00:00:39.070
“誕生日と現在の日付は有効な日付であり
タイムトラベルがないと仮定します”

00:00:39.070 --> 00:00:42.500
誕生日と現在の日付だけの話であれば
これは妥当な仮定でしょう

00:00:42.500 --> 00:00:45.010
そして2つの日付について検討するわけですが

00:00:45.010 --> 00:00:48.410
仮定では2つ目の日付が1つ目の日付のあとになります

00:00:48.410 --> 00:00:51.710
このような仮定があるとプログラマは楽になります

00:00:51.710 --> 00:00:56.480
考えられる入力が減るので
コードが書きやすくなるのです

00:00:56.480 --> 00:00:59.760
“タイムトラベルがない”という
マティアスの表現も好きです

00:00:59.760 --> 00:01:03.020
ただしプログラムの仕様としては
もう少し正確にする必要があるでしょう

00:01:03.020 --> 00:01:07.430
そこで“2つ目の日付は
1つ目の日付の前にあってはいけない”とします

00:01:07.430 --> 00:01:11.070
優れた堅実なプログラマでありたければ
これが正しいかをチェックするべきです

00:01:11.070 --> 00:01:15.500
この仮定を満たすかどうかは
コードを使うユーザしだいです

00:01:15.500 --> 00:01:18.010
要件を述べただけだからです

00:01:18.010 --> 00:01:19.570
私たちの解き方としては

00:01:19.570 --> 00:01:22.510
2つ目の日付が1つ目の前にないことを
確実にしましょう

00:01:22.510 --> 00:01:25.780
そのためには
堅実なコーディングにする必要があります

00:01:25.780 --> 00:01:28.880
間違える人がいるかもしれませんし
自分が間違えることもあるからです

00:01:28.880 --> 00:01:30.940
そこでコードでチェックすることにします

00:01:30.940 --> 00:01:35.290
この他にも日付の範囲を仮定する必要があるでしょう

00:01:35.290 --> 00:01:38.760
暦はとても複雑です　歴史と共に変化しています

00:01:38.760 --> 00:01:41.960
日付は1582年10月に始まったグレゴリオ暦の

00:01:41.960 --> 00:01:45.630
有効な日付であるとしましょう

00:01:45.630 --> 00:01:46.700
私たちのコードはおそらく

00:01:46.700 --> 00:01:48.140
この範囲外の日付でも機能するでしょう

00:01:48.140 --> 00:01:50.640
ですが暦が変わると日付の意味も変わるので

00:01:50.640 --> 00:01:53.550
完全に正確な答えは得られないかもしれません

