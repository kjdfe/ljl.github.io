WEBVTT
Kind: captions
Language: en

00:00:00.210 --> 00:00:04.236
So here's what I'll suggest is my favorite ordering, is we're going to first

00:00:04.236 --> 00:00:08.460
write a stub, daysInMonth, that will take a year and a month and return always

00:00:08.460 --> 00:00:12.663
30, which certainly not correct. Then we'll modify our nextDay routine to use

00:00:12.663 --> 00:00:16.300
that stub, and then, right away, we'll test it. At this point, we won't have

00:00:16.300 --> 00:00:19.550
done anything that will actually change the outputs from what we were getting

00:00:19.550 --> 00:00:22.800
before if things are correct. But we're now restructure the code in a way that

00:00:22.800 --> 00:00:26.760
all we have to do is improve daysInMonth. And then we've got the correct answer.

00:00:26.760 --> 00:00:31.674
The next thing we'll do is modify daysInMonth to be correct, except for leap

00:00:31.674 --> 00:00:35.020
years. I'm putting off leap years as long as I can because I think leap years

00:00:35.020 --> 00:00:38.530
are really annoying. But there are also a complexity that only comes up

00:00:38.530 --> 00:00:41.910
occasionally. And we can have really close to a correct answer and know that

00:00:41.910 --> 00:00:45.174
we've got all the structure of the code and everything in good place, putting

00:00:45.174 --> 00:00:48.882
that off. So, I'll do that. Then I think it's a good idea to test again. So

00:00:48.882 --> 00:00:52.858
we're going to do the testing again in step five, and it would have been

00:00:52.858 --> 00:00:57.648
perfectly okay to do the testing using daysInMonth. I think it's easier to do it

00:00:57.648 --> 00:01:02.236
using nextDay, since I can just keep rerunning the same tests that I did for

00:01:02.236 --> 00:01:06.541
step three. Now, I've got to the point where I really can't put off leap years

00:01:06.541 --> 00:01:10.427
any longer, so I'm going to do the leap years next, and I'll write a helper

00:01:10.427 --> 00:01:15.097
procedure isLeapYear. That's step 6. And I'm going to test that separately.

00:01:15.098 --> 00:01:18.532
That's another step that you could argue, well, I could test that using

00:01:18.532 --> 00:01:22.375
daysInMonth or using nextDay. In this case isLeapYear, they're enough special

00:01:22.375 --> 00:01:26.108
cases that it makes more sense to test that separately. Okay, and after I've

00:01:26.108 --> 00:01:30.195
done that I should have a fully correct solution. I could test it separately,

00:01:30.195 --> 00:01:33.749
but I'm pretty confident in the rest of my code at this point. I'm going to jump

00:01:33.749 --> 00:01:37.450
right ahead to step K and run all the test cases. So this is order I'd

00:01:37.450 --> 00:01:41.720
recommend, but there's plenty of other orders that make sense. One thing that

00:01:41.720 --> 00:01:44.570
would certainly make sense would be to move the leap year stuff to the

00:01:44.570 --> 00:01:48.048
beginning. If you like leap years, and don't want to put that off, easy to do

00:01:48.048 --> 00:01:51.956
that separately first. The other thing that could happen is instead of using the

00:01:51.956 --> 00:01:55.176
nextDay test, use the daysInMonth test. That would be perfectly reasonable as

00:01:55.176 --> 00:01:58.395
well. So there are lots of correct answers to this question. The property that

00:01:58.395 --> 00:02:02.348
they should all have, all the correct answers, is that you're writing small bits

00:02:02.348 --> 00:02:06.022
of code that you can test independently as you go. You don't want to be writing

00:02:06.022 --> 00:02:09.514
a lot of code and not being able to test it. That's one of the most important

00:02:09.514 --> 00:02:12.938
things to learn as a developer is to think of ways to structure a code, to

00:02:12.938 --> 00:02:16.708
organize the way you build code, so you're able to do meaningful tests as you go

00:02:16.708 --> 00:02:20.304
and see the code incrementally get closer to the solution that you need for

00:02:20.304 --> 00:02:24.132
that. As you get more confident as a programmer, you might skip some of these

00:02:24.132 --> 00:02:27.540
steps. But part of my motivation in asking this question is, when I tried to

00:02:27.540 --> 00:02:31.115
solve this problem myself, I had a bug in my solution, because I didn't do these

00:02:31.115 --> 00:02:35.278
steps carefully enough. And I've tried running all the test cases and they all

00:02:35.278 --> 00:02:39.440
failed. And, debugging it took a lot longer than if I'd followed this pattern.

00:02:39.440 --> 00:02:43.470
What I'm going to encourage you to do as you develop your solution, is to write

00:02:43.470 --> 00:02:47.550
code to run all these tests as part of your solution. And, what I hope will

00:02:47.550 --> 00:02:51.937
happen, if you do these steps, testing as you go. When you finally get to step

00:02:51.937 --> 00:02:56.215
K, and run it on all the test cases, it will magically all work correctly the

00:02:56.215 --> 00:03:00.014
first time. Except, it won't be magic. It'll be the result of building things in

00:03:00.014 --> 00:03:01.453
a systematic and careful way.

