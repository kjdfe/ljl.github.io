WEBVTT
Kind: captions
Language: ja

00:00:00.260 --> 00:00:04.680
最も適切な答えはnextDay関数です
これは解決策を機能させる最も重要なものです

00:00:04.680 --> 00:00:10.310
機能しなければ別の方法を考えなくてはなりません

00:00:10.330 --> 00:00:16.750
この答えが最も適切である理由は
簡単な方法で解決できるからです

00:00:16.820 --> 00:00:21.130
各月の日数という複雑さを気にしなくていいのです

00:00:21.260 --> 00:00:23.950
正しい答えに近づけるので気分がスッキリします

00:00:23.950 --> 00:00:27.940
もう1つ許容の範囲だと思うのはisLeapYearです

00:00:27.940 --> 00:00:31.090
うるう年の計算はいつか必要になるでしょう

00:00:31.090 --> 00:00:34.200
2月の日数を知るために
その年がうるう年かを調べます

00:00:34.200 --> 00:00:37.410
しかし書くのは苦痛で少し見苦しいものです

00:00:37.410 --> 00:00:41.510
うるう年かを調べることはできますが
さほど興味深いものではありません

00:00:41.550 --> 00:00:45.680
これは後回しにします　順序立てて説明しましょう

00:00:45.750 --> 00:00:47.830
残りの2つは正しい答えではありません

00:00:47.830 --> 00:00:51.350
すべての問題に対処するには少し早いので

00:00:51.350 --> 00:00:55.950
もっと簡単な部分に分解していきます
私たちが前進していることが分かると思います

00:00:55.970 --> 00:00:58.310
最後のものは非常に近いのですが

00:00:58.310 --> 00:01:03.610
問題は他の関数を書けるまで
本当に必要な関数ではないことです

00:01:03.610 --> 00:01:07.640
これをどう行うかもっと考える必要があります

00:01:07.640 --> 00:01:11.800
正確に実装するための知識が不十分かもしれません

00:01:11.800 --> 00:01:17.510
これを必要としないのは2月の場合
月の日数が毎年同じではないからです

00:01:17.550 --> 00:01:19.910
ではnextDay関数を書き始めます

00:01:19.910 --> 00:01:24.280
簡単にするために各月の日数は30日と仮定します

