WEBVTT
Kind: captions
Language: zh-CN

00:00:00.200 --> 00:00:04.086
这里是我实现 nextDay 的方法 你会注意到我是用

00:00:04.086 --> 00:00:08.087
docstring (文档字符串) 开始的 这在大多数 Python 系统中是一种特殊的注释

00:00:08.087 --> 00:00:11.992
我放在这里是为了警告 使人们意识到 这个实现方法实际上是不正确的

00:00:11.992 --> 00:00:15.478
所以说它不应该用于时间表 老实说 这会是大灾难 但是现在

00:00:15.478 --> 00:00:19.120
这对于测试来说是好的 逻辑很简单 如果天数少于 30

00:00:19.120 --> 00:00:23.020
因为我们假设所有月份都只有 30 天 我们会把天数加 1　

00:00:23.020 --> 00:00:27.014
然后返回年、月、日的三元组

00:00:27.014 --> 00:00:30.674
否则我们需要增加月份 我们将前进到下一个月

00:00:30.674 --> 00:00:35.920
并且重置天数为 1 如果我们在 12 月份 之后我们需要增加年份

00:00:35.920 --> 00:00:40.458
并重置日期为 1月1号 对较大的问题 你应该从

00:00:40.458 --> 00:00:44.660
思考一些测试用例开始 看看这些例子是否表现得如期望的那样

00:00:44.660 --> 00:00:48.894
我们提供了一些例子 你会注意到这里的一个很棒的东西

00:00:48.894 --> 00:00:52.794
即 Idle 提供的 Python 终端 当我尝试使用 nextDay 我可以

00:00:52.794 --> 00:00:56.550
在这里看到 docstring 通常我们在这里想要的 docstrings 都是描述性的

00:00:56.550 --> 00:01:00.524
警告是非常有用的 我给了一个年月日的实例

00:01:00.524 --> 00:01:04.617
我看到我得到了正确答案 我知道对于一些例子 比如说

00:01:04.617 --> 00:01:08.766
1月30日 接下来的一天应当是1月31日

00:01:08.766 --> 00:01:12.956
而实际得到的是2月1日 因为假设所有月份都有 30 天

00:01:12.956 --> 00:01:16.944
我们应该尝试一个更不同的例子 例如一年的末尾

00:01:16.944 --> 00:01:21.102
这里 我将使用12月31日 日期将会前进一年无论是12月31号还是

00:01:21.102 --> 00:01:24.892
12月30号 因为之前的假设 我们将获得 2013年1月1日

