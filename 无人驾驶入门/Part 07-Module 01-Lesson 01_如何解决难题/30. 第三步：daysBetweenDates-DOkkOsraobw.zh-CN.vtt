WEBVTT
Kind: captions
Language: zh-CN

00:00:00.250 --> 00:00:03.682
既然我们已经得到了辅助函数 那么定义 daysBetweenDates 就很简单了

00:00:03.682 --> 00:00:07.624
首先 while 循环条件确定 date1 在 date2 之前

00:00:07.624 --> 00:00:12.935
然后 我们用 nextDay 来更新 year1、month1、day1

00:00:12.935 --> 00:00:17.218
之后对天数 (days) 加 1 处理 先来试试几个例子吧 这是我们之前

00:00:17.218 --> 00:00:21.365
手动算过的例子 这里得出 155 虽然并不是很准确

00:00:21.365 --> 00:00:25.810
但是已经很接近了 之前我们手动计算时得到了 156 而且给定

00:00:25.810 --> 00:00:29.778
nextDay 假设每个月都有 30 天 所以这里没有得到正确结果

00:00:29.778 --> 00:00:34.339
并不是很意外 来试试另一个例子吧 这将是个很好的完整性检查

00:00:34.339 --> 00:00:38.788
来检查程序是否仍然足够快 我们在这里输入 100 年

00:00:38.788 --> 00:00:44.017
然后得到了 36000 天 看起来似乎是对的 如果按照 12 个月每个月 30 天

00:00:44.017 --> 00:00:49.080
一年确实是 360 天 而不是正确的一年长度 再来试试一个例子吧

00:00:49.080 --> 00:00:52.911
在我运行之前 你先试着猜猜会发生什么 我得到了答案 0

00:00:52.911 --> 00:00:56.516
这并不正确 对吧 因为它们并不是同一天 在某种意义上来说

00:00:56.516 --> 00:01:00.664
这是一个有效的答案 daysBetweenDates 的功能陈述中说 我们可以

00:01:00.664 --> 00:01:04.866
假设第一个日期不会在第二个日期之后 而在这个例子中

00:01:04.866 --> 00:01:08.314
第一个日期确实是在第二个日期后 但这不是一个非常让人满意的答案 我们其实

00:01:08.314 --> 00:01:12.060
真的不想得到答案 0 我们可以更改规范来表明 如果

00:01:12.060 --> 00:01:15.745
第一个日期在第二个日期后的话 结果就为 0 但这种

00:01:15.745 --> 00:01:19.418
看待事物的方式还是有点奇怪 如果为了让它更加有意义

00:01:19.418 --> 00:01:23.060
而给这个一个负值的话 这将会使我们的代码更加复杂

00:01:23.060 --> 00:01:27.122
这个会作为课后练习留给你 比起这个

00:01:27.122 --> 00:01:30.847
我要提倡的是编写得更加有防御性 (defensively) 如果函数的输入

00:01:30.847 --> 00:01:34.879
不能够满足函数的假设的话 那么提出一个断言 (assertion)

00:01:34.879 --> 00:01:38.848
给出失败 比起继续运行下去给出一个奇怪的结果

00:01:38.848 --> 00:01:42.948
或者是以其他意想不到的方式表现 要好的多

00:01:42.948 --> 00:01:44.633
所以我将要求你在练习中完成这个

