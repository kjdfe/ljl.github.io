WEBVTT
Kind: captions
Language: ja

00:00:00.000 --> 00:00:03.800
問題の解き方を系統立てるアルゴリズムを
書いてみましょう

00:00:03.800 --> 00:00:05.530
疑似コードとして書いていきます

00:00:05.530 --> 00:00:10.010
完全に正確なPythonの書き方をしなくても
よいという意味です

00:00:10.010 --> 00:00:13.310
アイデアを書き出してみて
意味が通っているかを確認しましょう

00:00:13.310 --> 00:00:15.610
人間はどう問題を解くかについて
もう一度考えてみましょう

00:00:15.610 --> 00:00:19.750
まず開始日を確認しました　1月24日でしたね

00:00:19.750 --> 00:00:24.190
1月に残されている日数を単純に数え上げました

00:00:24.190 --> 00:00:26.820
月の初めの方から数える場合は
すべての日数を数えたくないかもしれません

00:00:26.820 --> 00:00:30.790
その場合は1月の全日数と開始日の差を計算すれば
その間の日数が分かります

00:00:30.790 --> 00:00:32.030
この処理から始めましょう

00:00:32.030 --> 00:00:35.000
結果をdaysという変数に保持しましょう

00:00:35.000 --> 00:00:42.170
まずdaysに現在の月の日数から
開始日を引いた数値を設定します

00:00:42.170 --> 00:00:46.410
例題では1月でしたので日数は31です

00:00:46.410 --> 00:00:49.780
そこから24を引いて7となりますね

00:00:49.780 --> 00:00:52.180
これでmonth1が終了しましたので

00:00:52.180 --> 00:00:55.420
month1の値を1増やす必要があります

00:00:55.420 --> 00:00:57.350
そして2月です

00:00:57.350 --> 00:01:00.660
ここからは目標月にたどり着くまで
順に処理していきます

00:01:00.660 --> 00:01:04.790
目指している6月に達するまで
1月ずつ見ていきましたね

00:01:04.790 --> 00:01:06.530
これはwhileループに似ています

00:01:06.530 --> 00:01:10.400
停止条件に達するまで何度も繰り返します

00:01:10.400 --> 00:01:12.030
これを疑似コードで書きます

00:01:12.030 --> 00:01:18.410
現在の月の値がターゲット月の値より小さい間は
処理を続けていきます

00:01:18.410 --> 00:01:21.110
daysに現在の月の日数を加えます

00:01:21.110 --> 00:01:23.750
そして現在の月に1を加えます

00:01:23.750 --> 00:01:24.880
まだ終わっていません

00:01:24.880 --> 00:01:27.500
目標月における計算が残っています

00:01:27.500 --> 00:01:30.090
目標月では単に目標日の日付を加えます

00:01:30.090 --> 00:01:34.890
例えば6月1日なら6月の日数として1を加えます

00:01:34.890 --> 00:01:38.130
例題では6月29日がターゲット日でしたので
29を加えます

00:01:38.130 --> 00:01:41.300
まだ年の処理を行っていませんが
この例題では不要です

00:01:41.300 --> 00:01:44.270
ですが他の場合は年の計算を行う必要があります

00:01:44.270 --> 00:01:46.050
その方法を考えてみましょう

00:01:46.050 --> 00:01:48.770
月と同じように行うことができます

00:01:48.770 --> 00:01:53.710
目標年と同じ年になるまでは
その年の日数を加えていきます

