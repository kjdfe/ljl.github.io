WEBVTT
Kind: captions
Language: en

00:00:00.360 --> 00:00:04.083
Okay, so now I've left the most annoying thing for last. I've gotta deal with

00:00:04.083 --> 00:00:08.216
leap years. And my campaign to eliminate leap years has not been successful, so

00:00:08.216 --> 00:00:12.157
we've gotta figure out a way to figure out if it's a leap year. And the rules

00:00:12.157 --> 00:00:16.479
for leap years are pretty complicated. Let's see, what Wikipedia has to tell us

00:00:16.479 --> 00:00:21.572
about that. This is quite interesting. You can see how accurate the solstice is

00:00:21.572 --> 00:00:25.668
over time as the leap days go. But the great thing here is that it actually has

00:00:25.668 --> 00:00:29.595
code. And it's not Python code but it's pretty close. But this is a very clear

00:00:29.595 --> 00:00:33.755
way to describe the algorithm for determining whether a year is a leap year or

00:00:33.755 --> 00:00:37.831
not. If it's divisible by 400 then it's a leap year, if it's divisible by

00:00:37.831 --> 00:00:41.861
100 then it's not, if it was not divisible by 400, if it's divisible

00:00:41.861 --> 00:00:46.030
by four then it's a leap year, otherwise it's not a leap year. So, let's turn that into code.

00:00:46.030 --> 00:00:49.600
I'm going to cut and paste that, so I can see. If i was doing this

00:00:49.600 --> 00:00:53.920
with a smaller font size or a larger screen, I could see that at the same time,

00:00:53.920 --> 00:00:57.587
so I wouldn't have to cut and paste it. But it's a good thing to have as a comment

00:00:57.587 --> 00:01:01.097
anyway. So all we've got to do now is turn that into Python. And I could do it

00:01:01.097 --> 00:01:06.879
in a straightforward way. I'm going to be a little bit lazier and save some typing by doing it in one line.

00:01:06.879 --> 00:01:12.280
Let me reconsider. I'm going to try to get this right the first time. We'll use a few more lines of code and I will follow

00:01:12.280 --> 00:01:13.931
what Wikipedia says more carefully.

00:01:13.931 --> 00:01:17.053
So if the year mod 400 is equal to 0, we're going

00:01:17.053 --> 00:01:21.901
to return True. It is a leap year. If the year mod 100 is equal to 0, we're

00:01:21.901 --> 00:01:26.466
going to return False. It's not a leap year. If the year mod 4 is equal to 0,

00:01:26.466 --> 00:01:31.108
we're going to return True. And if not, but we don't actually need the else,

00:01:31.108 --> 00:01:35.559
because we've been returning, we're going to return False. So let's test that.

00:01:35.559 --> 00:01:40.231
And if I wasn't thinking this was simple, I would probably write some special

00:01:40.231 --> 00:01:44.564
test cases, to test leap years. I'm going to just do it by hand with a few test

00:01:44.564 --> 00:01:48.666
cases now, because I think there aren't too many difficult ones. So 2000 is

00:01:48.666 --> 00:01:54.417
divisible by 400, so it should be a leap year. 2100 is not divisible by 400, so

00:01:54.417 --> 00:02:02.103
should not be a leap year and 2012 should be a leap year, and 2013 should not be

00:02:02.103 --> 00:02:06.356
a leap year. So I think I'm fairly confident that I got that right. So now,

00:02:06.356 --> 00:02:10.648
we're going to try to put that into daysInMonths. We need to change the case

00:02:10.648 --> 00:02:14.495
for daysInMonth when the month is February. Now we need to check the year, and

00:02:14.495 --> 00:02:18.853
if it's a leap year, we return 29, otherwise, we return 28. And I don't need

00:02:18.853 --> 00:02:21.970
the else here, I'm going to put the else in just to make it look more balanced.

00:02:21.970 --> 00:02:26.149
Okay, so now let's run our current tests, make sure we didn't break something.

00:02:26.150 --> 00:02:30.426
They'll finished, that's a good sign. Let's add some tests that depend on leap

00:02:30.426 --> 00:02:34.961
years. So were going to, to test the nextDay, a February 28th, if it is a leap

00:02:34.961 --> 00:02:40.101
year. And we should do some long year tests, the number of days in a leap year

00:02:40.101 --> 00:02:44.894
should be 366. So I've got those two, let's also add the tests that we did by

00:02:44.894 --> 00:02:49.681
hand, and let's see, and the test all passed. And now we should try running it

00:02:49.681 --> 00:02:51.680
on the test that were provided.

