WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.589
这是我们的car.py文件

00:00:02.589 --> 00:00:05.294
让我们来逐行看看这里的代码

00:00:05.294 --> 00:00:07.424
首先 你会注意到红色的东西

00:00:07.424 --> 00:00:09.839
只是描述类的注释

00:00:09.839 --> 00:00:13.509
它描述了类的定义及其属性

00:00:13.509 --> 00:00:16.289
还有一些评论 例如这些是很好的做法 尤其是

00:00:16.289 --> 00:00:20.184
如果你希望其他开发人员能够理解你的代码时

00:00:20.184 --> 00:00:21.709
现在 如果我们向下滚动一下

00:00:21.710 --> 00:00:25.335
你看到的第一个对象就是我们的类 汽车

00:00:25.335 --> 00:00:27.765
这看起来有点像函数声明

00:00:27.765 --> 00:00:30.570
但是这个词‘类’让 Python 知道后面那个代码

00:00:30.570 --> 00:00:34.710
应描述汽车对象的状态和功能

00:00:34.710 --> 00:00:37.121
对象同样应始终大写

00:00:37.121 --> 00:00:40.189
所以我们看到 Car 是大写的

00:00:40.189 --> 00:00:43.289
接下来 我们看到初始函数

00:00:43.289 --> 00:00:47.490
它负责在内存中创建一个特定的汽车对象 如 Carlat 

00:00:47.490 --> 00:00:51.975
所以当你运行像 Car.Car 这样的代码并输入一些初始参数时

00:00:51.975 --> 00:00:54.385
这就是所调用的函数

00:00:54.384 --> 00:00:56.640
这就是从输入的位置和速度变量

00:00:56.640 --> 00:00:59.799
所创建的初始状态的位置

00:00:59.799 --> 00:01:02.294
我们还可以看到相对于汽车的变量 包括世界

00:01:02.295 --> 00:01:04.555
及其颜色和路径

00:01:04.555 --> 00:01:06.915
我们知道世界只是一个二维网格

00:01:06.915 --> 00:01:09.030
我们会重新考虑颜色 不过不是现在

00:01:09.030 --> 00:01:11.700
这就是为什么车在网格中显示为红色的原因

00:01:11.700 --> 00:01:14.219
路径只是一个汽车行驶过的位置列表

00:01:14.219 --> 00:01:17.905
我们可以将其可视化

00:01:17.905 --> 00:01:21.750
所以这里最重要的代码是状态和世界

00:01:21.750 --> 00:01:26.829
这里的所有变量都是汽车对象所跟踪的

00:01:26.829 --> 00:01:29.864
接下来 如果我们向下滚动 则是滚动函数

00:01:29.864 --> 00:01:33.059
它的描述为 滚动函数使汽车沿着

00:01:33.060 --> 00:01:36.353
速率方向运动并更新其状态

00:01:36.352 --> 00:01:39.359
这看起来像预测状态函数

00:01:39.359 --> 00:01:42.480
滚动函数采用一个恒定速率模型

00:01:42.480 --> 00:01:45.942
在其速率 VY 和 VX 方向移动汽车

00:01:45.941 --> 00:01:48.179
如果我们看这个方程的一部分

00:01:48.180 --> 00:01:51.000
我们可以看到这是我们的恒定速率模型

00:01:51.000 --> 00:01:53.084
它说我们的初始位置 y

00:01:53.084 --> 00:01:58.744
加上时间与 y 速度的乘积 成为了我们新预测的位置

00:01:58.745 --> 00:02:03.495
最后 我们更新在 int 中初始化的当前状态变量

00:02:03.495 --> 00:02:07.635
这就是我们在运动时跟踪汽车状态的方式

00:02:07.635 --> 00:02:09.645
接下来 我们来看左转函数

00:02:09.645 --> 00:02:13.005
它将速度值简单地向左旋转

00:02:13.004 --> 00:02:18.060
这个函数采用新的速度再次更新汽车的状态 最后

00:02:18.060 --> 00:02:20.460
我们得到了这个显示世界的函数

00:02:20.460 --> 00:02:22.950
你不能改变 但可以随意阅读

00:02:22.949 --> 00:02:26.599
它负责在一个网格中显示世界以及我们的车在其中的位置

00:02:26.599 --> 00:02:29.484
并且它使用 pyplot 来进行可视化

00:02:29.485 --> 00:02:31.965
接下来 由你来阅读这段代码

00:02:31.965 --> 00:02:35.460
了解 Carlat 等汽车对象如何跟踪状态

00:02:35.460 --> 00:02:39.270
这些一起 可以帮助你在这个汽车类中写一些额外的函数

