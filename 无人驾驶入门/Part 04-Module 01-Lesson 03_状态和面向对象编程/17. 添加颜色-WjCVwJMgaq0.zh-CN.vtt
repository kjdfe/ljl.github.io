WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.720
下面 我们回到 car.py 文件 让我们看看如何

00:00:03.720 --> 00:00:07.620
修改这个汽车对象并添加一个颜色变量

00:00:07.620 --> 00:00:09.390
在我们的类代码中

00:00:09.390 --> 00:00:11.760
我们可以看到 汽车有一个默认颜色

00:00:11.759 --> 00:00:17.625
红色 由字符 r 表示 你觉得我们应该如何定制这个颜色？

00:00:17.625 --> 00:00:20.370
那么就像这个世界中的状态变量的定制一样

00:00:20.370 --> 00:00:23.714
我们可以在初始化参数中导入颜色

00:00:23.714 --> 00:00:25.274
通常情况下 要这样做

00:00:25.274 --> 00:00:29.189
我们只需要在 init 函数添加一个额外的参数

00:00:29.190 --> 00:00:31.554
我会调用颜色这个参数

00:00:31.554 --> 00:00:35.594
我也可以指定颜色的默认值为红色

00:00:35.594 --> 00:00:36.810
等于这个字符

00:00:36.810 --> 00:00:40.740
r 该颜色等于 r 就意味着在且仅在以下条件

00:00:40.740 --> 00:00:45.315
即在创建汽车对象时没有指定颜色参数时

00:00:45.314 --> 00:00:47.594
默认情况下 它将是红色的

00:00:47.594 --> 00:00:50.365
其他变量都没有默认值

00:00:50.365 --> 00:00:53.785
然后我们还必须改变另一行代码

00:00:53.784 --> 00:00:56.628
这里 self.color 不等于 r

00:00:56.628 --> 00:00:59.659
而是等于颜色

00:00:59.659 --> 00:01:03.174
这就是我们之前在这里使用的变量

00:01:03.174 --> 00:01:06.935
所以现在 我们的 init 函数初始化了车的状态

00:01:06.935 --> 00:01:09.826
给了这台车一个可以穿行的 2D 世界

00:01:09.825 --> 00:01:12.559
并指定了车的颜色

00:01:12.560 --> 00:01:16.480
剩下的一切就是用可执行代码来测试

00:01:16.480 --> 00:01:18.585
所以让我们进入一个新的 notebook

00:01:18.584 --> 00:01:23.064
这是我们通常的导入声明 在此导入我们的汽车类文件

00:01:23.064 --> 00:01:25.079
接下来 我将创建汽车对象

00:01:25.079 --> 00:01:27.780
在这里 我定义了初始参数

00:01:27.780 --> 00:01:30.960
我正在按照通常的方式创建 carla

00:01:30.959 --> 00:01:35.909
然后 我将定义一些新的初始参数 创建一个新的汽车对象

00:01:35.909 --> 00:01:38.328
这一次 我会把车命名为 jeannette

00:01:38.328 --> 00:01:43.049
你可以看到 我正在输入初始状态变量 position2 和 velocity2

00:01:43.049 --> 00:01:47.009
我在导入同一个世界 我还在导入

00:01:47.010 --> 00:01:51.150
颜色并指定 jeannette 为黄色 具体做法是采用字符

00:01:51.150 --> 00:01:54.055
y 表示 作为我们最后一次导入的变量

00:01:54.055 --> 00:01:55.950
顺序在这里很重要

00:01:55.950 --> 00:01:59.340
应该符合我们汽车类文件中的顺序

00:01:59.340 --> 00:02:00.855
现在我应该有两辆车

00:02:00.855 --> 00:02:04.885
carla 和 jeannette 我会运行 notebook 的这个单元格

00:02:04.885 --> 00:02:07.109
现在 如果在此步骤中出现错误

00:02:07.109 --> 00:02:10.770
请确保你在更改了的汽车类文件后已经保存

00:02:10.770 --> 00:02:15.210
通过单击 Kernel 然后点击 Restart &amp; Clear Output 重新启动 Kernel

00:02:15.210 --> 00:02:16.695
现在 既然没有任何错误

00:02:16.694 --> 00:02:20.534
我的下一步将是为这两辆车写一些移动代码

00:02:20.534 --> 00:02:23.574
这很有趣 只是为了可视化

00:02:23.574 --> 00:02:25.139
首先 我将移动 carla

00:02:25.139 --> 00:02:27.834
告诉 carla 移动 并左转 然后再移动

00:02:27.835 --> 00:02:30.344
然后我要显示 carla 的世界

00:02:30.344 --> 00:02:32.159
我们可以看到 carla 的移动

00:02:32.159 --> 00:02:34.935
向前移动 然后向左并环绕世界

00:02:34.935 --> 00:02:37.110
我们看到 carla 是红色的

00:02:37.110 --> 00:02:39.775
红色是默认颜色 因为我们在创建时没有指定

00:02:39.775 --> 00:02:44.129
一种颜色 让我们向下滚动

00:02:44.129 --> 00:02:45.509
接下来 我将移动 jeannette

00:02:45.509 --> 00:02:48.269
左转 然后移动 然后左转 然后再移动一点

00:02:48.270 --> 00:02:50.370
我会显示 jeannette 的世界

00:02:50.370 --> 00:02:53.175
我们可以看到 jeanette 的开始角度不同

00:02:53.175 --> 00:02:55.915
并创建了不同的路径进行循环移动

00:02:55.914 --> 00:02:57.465
我们看到 jeannette 是黄色的

00:02:57.465 --> 00:03:01.025
包括路径也是黄色的 这非常酷

00:03:01.025 --> 00:03:05.719
添加汽车颜色等更多变量 只需要几行代码

00:03:05.719 --> 00:03:07.750
函数也一样

00:03:07.750 --> 00:03:12.000
你可以将它们的定义应用于类 然后就能访问它们了

