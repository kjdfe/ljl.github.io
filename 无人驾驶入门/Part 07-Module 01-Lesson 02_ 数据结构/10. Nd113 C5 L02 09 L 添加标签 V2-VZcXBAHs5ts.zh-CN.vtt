WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.894
这是 JIRA 的创建问题对话框

00:00:03.894 --> 00:00:05.610
这里使用的单词 issue

00:00:05.610 --> 00:00:08.165
意思和罚款单 (ticket) 一样

00:00:08.164 --> 00:00:11.384
在 issue 中 有一个关联的 Project

00:00:11.384 --> 00:00:13.140
还有 Issue Type 在本例中

00:00:13.140 --> 00:00:15.740
我们选择 Bug 接下来是Summary

00:00:15.740 --> 00:00:19.975
在本例中 我们输入” Literally everything is broken …
maybe?”

00:00:19.975 --> 00:00:22.141
这可是很严重的故障

00:00:22.140 --> 00:00:24.304
下面有些地方可以忽略

00:00:24.304 --> 00:00:29.414
接下来 我把 Priority 设为 Highest 然后设置一些标签

00:00:29.414 --> 00:00:31.424
或许你认为问题出在 Python 代码中

00:00:31.425 --> 00:00:34.920
因此 我输入pyt

00:00:34.920 --> 00:00:38.609
这里可以看到一个自动完成提示 告诉我们可以把Python 作为标签

00:00:38.609 --> 00:00:44.890
我可以点击这里 然后 我还想添加一个 bug 标签 提示中也有

00:00:44.890 --> 00:00:49.980
现在 让我们看看如果我一时发昏 再次添加 Python 会发生什么

00:00:49.979 --> 00:00:51.909
没有匹配

00:00:51.909 --> 00:00:55.829
JIRA 似乎在确保这个数据结构

00:00:55.829 --> 00:00:59.295
不会存在重复的相同标签

00:00:59.295 --> 00:01:02.160
Python 中有一个数据结构功能完全一样

00:01:02.159 --> 00:01:05.655
叫做 Set 后面我们会学习这个数据结构

00:01:05.655 --> 00:01:07.765
但是 首先我们先创建 Issue

00:01:07.765 --> 00:01:11.189
我们点击这个 Python 标签

00:01:11.189 --> 00:01:14.384
你可以看到 这是 JIRA 的一个特色功能

00:01:14.385 --> 00:01:16.844
它可以展示所有带Python 的标签的内容

00:01:16.844 --> 00:01:20.655
包括每一个带有这个相关标签的 Issue

00:01:20.655 --> 00:01:23.189
在下一个笔记本中 你将实现

00:01:23.189 --> 00:01:26.269
与我们之前讨论过的罚款单跟踪器类似的功能

00:01:26.269 --> 00:01:30.030
在这个过程中 你会学到一个叫做集合 (set) 的新的Python 数据类型

