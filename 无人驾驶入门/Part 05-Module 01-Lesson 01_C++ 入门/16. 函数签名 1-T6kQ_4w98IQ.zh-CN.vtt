WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.549
什么是函数声明 为什么它很重要？

00:00:03.549 --> 00:00:05.939
函数声明有多个片段

00:00:05.940 --> 00:00:09.839
这在代码中看起来更容易一些

00:00:09.839 --> 00:00:15.509
我们最好看看你的 tests normalize 函数

00:00:15.509 --> 00:00:20.939
当你只看函数定义的方式时

00:00:20.940 --> 00:00:26.225
首先是这个布尔值 然后是 tests normalize 接着是左括号 右括号

00:00:26.225 --> 00:00:31.450
这个布尔值表示它会返回 true 或 false

00:00:31.449 --> 00:00:32.820
与 Python 非常类似

00:00:32.820 --> 00:00:34.619
你可以返回任何你想要的值

00:00:34.619 --> 00:00:39.429
不过在 C++ 中 你必须告诉它你想要返回的类型

00:00:39.429 --> 00:00:41.310
它有一些优势

00:00:41.310 --> 00:00:43.150
例如在 Python 中

00:00:43.149 --> 00:00:46.019
如果你不小心只是返回了行

00:00:46.020 --> 00:00:48.705
却没有返回整个网格 Python 不会告诉你

00:00:48.704 --> 00:00:54.179
只有在语言运行时 你才知道出了错

00:00:54.179 --> 00:00:56.835
或许从你设置到发现错误已经过去三小时

00:00:56.835 --> 00:01:02.210
它会突然跳到代码中有 bug 的地方 你才能发现问题

00:01:02.210 --> 00:01:04.942
但是 C++ 却会马上告诉你

00:01:04.942 --> 00:01:07.545
如果你没有返回一些值 没有返回一些正确的值

00:01:07.545 --> 00:01:10.995
你甚至无法编辑

00:01:10.995 --> 00:01:15.160
我在 Python 中经常犯的一个错误是 我会完全忘记返回语句

00:01:15.159 --> 00:01:18.750
然后我就一直在处理一个无类型的对象

00:01:18.750 --> 00:01:21.989
这实际上可能是一个非常难调试的 bug

00:01:21.989 --> 00:01:23.809
所以我很清楚函数声明的价值所在

00:01:23.810 --> 00:01:24.579
没错

00:01:24.579 --> 00:01:27.774
你至少保证了这些零件正确地组装在一起

00:01:27.775 --> 00:01:30.240
它们可能不能达成预期功能 不过确实可以互相匹配

00:01:30.239 --> 00:01:33.809
没错 乐高积木自成一体

00:01:33.810 --> 00:01:36.950
你不会遗忘任何一块

00:01:36.950 --> 00:01:37.049
好的

00:01:37.049 --> 00:01:41.939
忘记返回或返回错误的值经常发生

00:01:41.939 --> 00:01:45.030
因为你可能正在思考其他事情

00:01:45.030 --> 00:01:48.530
幸好的是 C++ 具备安全检查功能 这会对你所有帮助

