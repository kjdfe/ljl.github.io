WEBVTT
Kind: captions
Language: pt

00:00:00.000 --> 00:00:05.000
Uau, praticamente programaste a localização usada pelo carro da Google

00:00:05.000 --> 00:00:08.000
embora ainda não o saibas.

00:00:08.000 --> 00:00:10.000
Deixa-me dizer-te a nossa situação.

00:00:10.000 --> 00:00:13.000
Falámos de actualização com medidas e falámos de movimento.

00:00:13.000 --> 00:00:16.000
Estas duas rotinas chamam-se "sense" e "move."

00:00:16.000 --> 00:00:20.000
Bem, a localização é nada mais do que a iteração de "sense" e "move."

00:00:20.000 --> 00:00:24.000
Há uma crença inicial que é atirada para este ciclo.

00:00:24.000 --> 00:00:27.000
Se medires primeiro, vai para a esquerda.

00:00:27.000 --> 00:00:33.000
Então a localização itera nestes ciclos -- move, sense, move, sense, move, sense.

00:00:33.000 --> 00:00:36.000
move, sense, move, sense.

00:00:36.000 --> 00:00:40.000
Sempre que o robot se move, perde informação sobre a posição correcta.

00:00:40.000 --> 00:00:42.000
Porque o movimento do robot é impreciso.

00:00:42.000 --> 00:00:45.000
Sempre que mede (observa), ganha informação.

00:00:45.000 --> 00:00:47.000
Isto manifesta-se no facto de, após o movimento

00:00:47.000 --> 00:00:51.000
a distribuição de probabilidade ficar mais aplanada.

00:00:51.000 --> 00:00:55.000
E depois de medir, ficar um pouco mais focada, com bossas maiores.

00:00:55.000 --> 00:01:00.000
Deixa-me dizer-te, em nota de rodapé, que há uma medida de informação, chamada "entropia."

00:01:00.000 --> 00:01:02.000
Esta é uma das muitas formas como a podes escrever:

00:01:02.000 --> 00:01:04.000
[-Ʃp(xi)log p(xi)]

00:01:04.000 --> 00:01:07.000
como a verosimilhança logarítmica esperada da probabilidade de cada célula.

00:01:07.000 --> 00:01:12.000
Sem entrar em detalhes, esta é a medida da informação contida na distribuição,

00:01:12.000 --> 00:01:18.000
e pode ser mostrado que fazer um movimento faz a entropia baixar

00:01:18.000 --> 00:01:20.000
e fazer uma observação faz a entropia aumentar.

00:01:20.000 --> 00:01:23.000
Na realidade, perdes e ganhas informação.

00:01:23.000 --> 00:01:26.000
Eu adoraria implementar isto no nosso código.

00:01:26.000 --> 00:01:29.000
Adicionalmente às medidas que já temos, vermelho e verde,

00:01:29.000 --> 00:01:32.000
dou-te dois movimentos -- 1 e 1,

00:01:32.000 --> 00:01:34.000
o que signiofica que o robot se move duas vezes para a direita.

00:01:34.000 --> 00:01:40.000
És capaz de calcular a distribuição a posteriori se o robot primeiro medir vermelho,

00:01:40.000 --> 00:01:45.000
depois move-se 1 passo à direita, depois observa verde e finalmente move-se de novo para a direita?

00:01:45.000 --> 99:59:59.000
Vamos partir de uma distribuição uniforme a priori.

