WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.785
你的第一项任务 就是对一个二进制数据集进行分类

00:00:04.785 --> 00:00:07.599
即在白天或夜间拍摄的图像

00:00:07.599 --> 00:00:09.893
但在完成该任务之前

00:00:09.893 --> 00:00:14.010
你首先要了解机器是如何看到这些图像的

00:00:14.009 --> 00:00:15.509
以这幅汽车图像为例

00:00:15.509 --> 00:00:18.164
它实际上是在道路上的无人驾驶车

00:00:18.164 --> 00:00:20.553
我们看看计算机是如何理解这张图的

00:00:20.553 --> 00:00:23.489
我们首先使用这里的这个灰阶图像

00:00:23.489 --> 00:00:26.159
因为颜色会再增加一层复杂度

00:00:26.160 --> 00:00:29.504
但具体原理是一样的 我们稍后会看到

00:00:29.504 --> 00:00:32.000
因此 当我向你展示这幅图像是 你可能说

00:00:32.000 --> 00:00:33.689
“噢 这是一副汽车的图像”

00:00:33.689 --> 00:00:37.259
这是汽车图像 也是一个多个数字组成的二维网格

00:00:37.259 --> 00:00:38.699
即一个阵列

00:00:38.700 --> 00:00:42.405
包括宽度和高度值 我们来具体看看

00:00:42.405 --> 00:00:45.810
这里和所有数字图像都由一个像素网格组成

00:00:45.810 --> 00:00:49.984
像素是非常小的单一颜色或密度的单位

00:00:49.984 --> 00:00:53.924
如果我们放大汽车图像 比如车轮周围的这个区域

00:00:53.924 --> 00:00:56.159
我们可以更清楚地看清楚这些像素

00:00:56.159 --> 00:00:59.699
现在 你可以看到 它看起来更像网格了

00:00:59.700 --> 00:01:03.945
这个网格中 每个像素颜色都有一个对应的数字值

00:01:03.945 --> 00:01:06.051
对于这样的灰阶图像

00:01:06.051 --> 00:01:09.885
每个像素的值从 0 到 255

00:01:09.885 --> 00:01:12.400
0 代表黑色 255 代表白色

00:01:12.400 --> 00:01:14.630
灰色处于中间的位置

00:01:14.629 --> 00:01:17.579
因此 120 左右的值是中度灰

00:01:17.579 --> 00:01:19.170
位于黑色和白色中间

00:01:19.170 --> 00:01:21.450
20 左右的值是很深的

00:01:21.450 --> 00:01:23.500
灰色 接近黑色

00:01:23.500 --> 00:01:24.930
这里每个像素

00:01:24.930 --> 00:01:26.760
不仅有颜色值

00:01:26.760 --> 00:01:28.065
还有一个位置

00:01:28.064 --> 00:01:30.484
在这个图像网格里的 x/y 值

00:01:30.484 --> 00:01:32.894
这些轴和图表的轴非常类似

00:01:32.894 --> 00:01:34.379
只是对于数据图像而言

00:01:34.379 --> 00:01:36.659
左上角的坐标是原点

00:01:36.659 --> 00:01:40.224
即 x=0 y=0

00:01:40.224 --> 00:01:45.419
这里 我们的汽车图像高度为 427 个像素 宽度为 640 个像素

00:01:45.420 --> 00:01:49.082
在网格上 像素位置的起点为 0

00:01:49.082 --> 00:01:54.450
横向位置为 0 到 639 列 纵向位置为 0 到 426 排

00:01:54.450 --> 00:01:59.875
例如 在 x 等于 190 y 等于 375 的位置

00:01:59.875 --> 00:02:03.750
这个像素位于车轮上 在图像左下角

00:02:03.750 --> 00:02:06.075
像素值是 38

00:02:06.075 --> 00:02:09.015
很深的深灰色 你可能想知道我是怎么得到这个值的

00:02:09.014 --> 00:02:13.149
在代码中 我们可以根据位置找到每个像素值

00:02:13.150 --> 00:02:14.545
我们做做看

00:02:14.544 --> 00:02:16.849
我们读入汽车的图像

00:02:16.849 --> 00:02:19.590
但首先 我先导入所需的库

00:02:19.590 --> 00:02:23.950
包括 matplotlib.image 它可以帮助我们读入任何图像

00:02:23.949 --> 00:02:25.649
你还看到 cv2

00:02:25.650 --> 00:02:27.284
这是一个计算机视觉库

00:02:27.284 --> 00:02:29.435
我们马上就会学到

00:02:29.435 --> 00:02:31.955
我还会使用 matplotlib qt

00:02:31.955 --> 00:02:36.445
Qt 的用处是 显示这幅图像时 会弹出一个互动窗口

00:02:36.444 --> 00:02:41.318
我使用 matplotlib 的 imread 函数读入这幅汽车图像

00:02:41.318 --> 00:02:44.334
导入图像文件的名称

00:02:44.335 --> 00:02:49.200
汽车图像在图像文件夹中 位置和这个笔记本相同

00:02:49.199 --> 00:02:52.844
接下来 我会打印出该图像的一些信息

00:02:52.844 --> 00:02:57.389
我想引用 image.shape 打印出图像尺寸

00:02:57.389 --> 00:03:00.179
现在 你可以看到它的高度和宽度像素值

00:03:00.180 --> 00:03:01.590
我们看到了另一个值 3

00:03:01.590 --> 00:03:05.219
它对应的是这幅图像的颜色通道数量

00:03:05.219 --> 00:03:08.159
我们后面会学到

00:03:08.159 --> 00:03:10.590
现在 我们先把图像转换为灰阶

00:03:10.590 --> 00:03:14.219
使用我们的计算机视觉库完成这个操作

00:03:14.219 --> 00:03:17.580
现在 你要知道 这里有内置的颜色转换代码

00:03:17.580 --> 00:03:21.730
在这里 把图像从红色/绿色/蓝色转换为灰阶

00:03:21.729 --> 00:03:24.524
然后 我会显示灰阶图像

00:03:24.525 --> 00:03:26.530
这里会打开互动窗口

00:03:26.530 --> 00:03:28.995
鼠标在图像上方移动时

00:03:28.995 --> 00:03:33.030
你可以看到在屏幕左下角显示了 x/y 位置

00:03:33.030 --> 00:03:35.520
还显示了对应的像素值

00:03:35.520 --> 00:03:36.951
下面 轮子这里

00:03:36.950 --> 00:03:40.155
我们有一个深色的像素值 大约是 28/29

00:03:40.155 --> 00:03:42.914
这里 在天空中 我们有一些浅色的像素值

00:03:42.914 --> 00:03:45.370
你可以看到 大概在 200 左右 甚至更高

00:03:45.370 --> 00:03:47.205
如果我们回到笔记本

00:03:47.205 --> 00:03:51.495
我们可以根据位置方位单个像素 打印出它的值

00:03:51.495 --> 00:03:55.550
例如 x 等于 190 y 等于 375

00:03:55.550 --> 00:03:58.230
要访问这个像素值 我可以在

00:03:58.229 --> 00:04:02.239
灰阶图像中查看这个位置 [y,x]

00:04:02.240 --> 00:04:04.365
最后 我打印出这个值

00:04:04.365 --> 00:04:06.730
我们可以看到 值是 28

00:04:06.729 --> 00:04:10.334
图像中的每个像素都是个数字值

00:04:10.335 --> 00:04:13.079
我们也可以改变这些像素值

00:04:13.079 --> 00:04:17.115
我们把每个值乘以一个标量 改变图像亮度

00:04:17.115 --> 00:04:19.889
我们可以把每个像素值右移或左移

00:04:19.889 --> 00:04:22.329
还有很多其他操作

00:04:22.329 --> 00:04:27.354
把图像看作数字组成的网格是很多图像处理方法的基础

00:04:27.355 --> 00:04:30.000
大多数颜色和形状转换 都只需要

00:04:30.000 --> 00:04:34.000
对图像进行数学运算 并逐个像素更改即可

