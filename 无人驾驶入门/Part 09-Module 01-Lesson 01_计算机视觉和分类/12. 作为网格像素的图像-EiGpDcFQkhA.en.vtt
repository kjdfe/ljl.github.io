WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.785
One of your first tasks will be to classify a binary set of data,

00:00:04.785 --> 00:00:07.599
images taken during the day or night.

00:00:07.599 --> 00:00:09.893
But before you can complete this task,

00:00:09.893 --> 00:00:14.010
you first have to learn about how images are seen by machines.

00:00:14.009 --> 00:00:15.509
Let's take this image of a car,

00:00:15.509 --> 00:00:18.164
this is actually a self-driving car on the road,

00:00:18.164 --> 00:00:20.553
and look at how a computer understands it.

00:00:20.553 --> 00:00:23.489
We'll be working with a grayscale image like this first,

00:00:23.489 --> 00:00:26.159
because color adds another layer of complexity.

00:00:26.160 --> 00:00:29.504
But the same general principles will apply, as we'll see soon.

00:00:29.504 --> 00:00:32.000
So when I show you this image you might say,

00:00:32.000 --> 00:00:33.689
"Oh it's a picture of a car".

00:00:33.689 --> 00:00:37.259
And it is, but it's also a 2D grid of values,

00:00:37.259 --> 00:00:38.699
also known as an array,

00:00:38.700 --> 00:00:42.405
with some width and height. Let me show you what I mean.

00:00:42.405 --> 00:00:45.810
This and all digital images are all made of a grid of

00:00:45.810 --> 00:00:49.984
pixels which are very small units of a single color or intensity.

00:00:49.984 --> 00:00:53.924
And if we zoom in on the image of the car like this area around the wheel,

00:00:53.924 --> 00:00:56.159
we can get a better look at these pixels.

00:00:56.159 --> 00:00:59.699
Now you can see it's really starting to look more like a grid.

00:00:59.700 --> 00:01:03.945
Each pixel color in this grid has a corresponding numerical value.

00:01:03.945 --> 00:01:06.051
For grayscale images like this,

00:01:06.051 --> 00:01:09.885
the value of each pixel ranges from 0 to 255.

00:01:09.885 --> 00:01:12.400
0 is black, 255 is white,

00:01:12.400 --> 00:01:14.630
and gray is anywhere in between.

00:01:14.629 --> 00:01:17.579
So, a value of around 120 is a medium gray,

00:01:17.579 --> 00:01:19.170
in-between black and white,

00:01:19.170 --> 00:01:21.450
and the value of around 20 will be a very,

00:01:21.450 --> 00:01:23.500
very dark gray, close to black.

00:01:23.500 --> 00:01:24.930
And, each of these pixels,

00:01:24.930 --> 00:01:26.760
in addition to having a color value,

00:01:26.760 --> 00:01:28.065
also has a location,

00:01:28.064 --> 00:01:30.484
x/y in this image grid.

00:01:30.484 --> 00:01:32.894
These axes are a lot like axes for a graph.

00:01:32.894 --> 00:01:34.379
Only for digital images,

00:01:34.379 --> 00:01:36.659
the top left coordinate is at the origin,

00:01:36.659 --> 00:01:40.224
or the point x equals 0, y equals 0.

00:01:40.224 --> 00:01:45.419
Now, our image of a car is 427 pixels in height and 640 in width,

00:01:45.420 --> 00:01:49.082
and the pixel locations are on a grid that starts at index zero,

00:01:49.082 --> 00:01:54.450
from 0 to 639 columns and from 0 to 426 rows.

00:01:54.450 --> 00:01:59.875
As an example, at the location x equals 190 and y equals 375,

00:01:59.875 --> 00:02:03.750
we have a pixel on this wheel at the bottom left of the image.

00:02:03.750 --> 00:02:06.075
The pixel value is 28, a dark,

00:02:06.075 --> 00:02:09.015
dark gray, and you might ask how I know this.

00:02:09.014 --> 00:02:13.149
Well, in code, we can actually find any single pixel value by location.

00:02:13.150 --> 00:02:14.545
So let's do that.

00:02:14.544 --> 00:02:16.849
We'll read in our image of a car.

00:02:16.849 --> 00:02:19.590
But first, I'll input the libraries I need.

00:02:19.590 --> 00:02:23.950
This includes matplotlib.image, which let's us read in any image.

00:02:23.949 --> 00:02:25.649
You'll also see cv2,

00:02:25.650 --> 00:02:27.284
which is a computer vision library,

00:02:27.284 --> 00:02:29.435
and you learn more about that soon.

00:02:29.435 --> 00:02:31.955
I'll also be using matplotlib qt.

00:02:31.955 --> 00:02:36.445
qt makes this image pop up in an interactive window when I display it.

00:02:36.444 --> 00:02:41.318
So I'll read in the image of our car using matplotlib's 'imread' function,

00:02:41.318 --> 00:02:44.334
and I'll pass in the name of our image file.

00:02:44.335 --> 00:02:49.200
I have the image of our car in an images directory in the same location as this notebook.

00:02:49.199 --> 00:02:52.844
Next, I'll actually print out some information about this image.

00:02:52.844 --> 00:02:57.389
I want to print out its dimensions by referencing image dot shape.

00:02:57.389 --> 00:03:00.179
Now you can see its height and width in pixels.

00:03:00.180 --> 00:03:01.590
And we see another value, three,

00:03:01.590 --> 00:03:05.219
which corresponds to the number of color channels his image has.

00:03:05.219 --> 00:03:08.159
And we'll learn more about this value soon.

00:03:08.159 --> 00:03:10.590
For now, we'll convert our image to be grayscale,

00:03:10.590 --> 00:03:14.219
and I'll convert it to grayscale using our computer vision library.

00:03:14.219 --> 00:03:17.580
For now, know that this has built-in color conversion code,

00:03:17.580 --> 00:03:21.730
like changing an image from red/green/blue color to grayscale.

00:03:21.729 --> 00:03:24.524
Then, I'll display this grayscale image.

00:03:24.525 --> 00:03:26.530
This opens our interactive window.

00:03:26.530 --> 00:03:28.995
And as I pass over this image with my mouse,

00:03:28.995 --> 00:03:33.030
you can see the x/y location displayed in the bottom left of the screen,

00:03:33.030 --> 00:03:35.520
as well as the corresponding pixel value.

00:03:35.520 --> 00:03:36.951
Down here by the wheel,

00:03:36.950 --> 00:03:40.155
we have dark pixel values around 28/29.

00:03:40.155 --> 00:03:42.914
And up here in the sky, we have some light pixel values,

00:03:42.914 --> 00:03:45.370
you can see around 220 or even higher.

00:03:45.370 --> 00:03:47.205
And if we go back to our notebook,

00:03:47.205 --> 00:03:51.495
we can print out the value of a single pixel by accessing it by location.

00:03:51.495 --> 00:03:55.550
I'll say x equals 190 and y equals 375.

00:03:55.550 --> 00:03:58.230
And I can access that pixel value by looking at

00:03:58.229 --> 00:04:02.239
that location in our gray image, y comma x.

00:04:02.240 --> 00:04:04.365
Finally, I'll print out that value,

00:04:04.365 --> 00:04:06.730
and we can see that it's 28.

00:04:06.729 --> 00:04:10.334
Every pixel in an image is just a numerical value,

00:04:10.335 --> 00:04:13.079
and we can also change these pixel values.

00:04:13.079 --> 00:04:17.115
We can multiply every single one by a scalar to change how bright the image is,

00:04:17.115 --> 00:04:19.889
we can shift each pixel value to the right or left,

00:04:19.889 --> 00:04:22.329
and many more operations.

00:04:22.329 --> 00:04:27.354
Treating images as grids of numbers is the basis for many image processing techniques.

00:04:27.355 --> 00:04:30.000
Most color and shape transformations are done just by

00:04:30.000 --> 00:04:34.000
mathematically operating on an image and changing it pixel by pixel.

