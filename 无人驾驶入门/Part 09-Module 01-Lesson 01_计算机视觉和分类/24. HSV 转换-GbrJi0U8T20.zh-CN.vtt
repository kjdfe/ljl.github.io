WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.849
接下来 我们要学习一个在 RGB 和 HSV 颜色空间中进行图像处理的案例

00:00:05.849 --> 00:00:10.019
HSV 颜色空间分离图像中每个像素的值或 V 分量

00:00:10.019 --> 00:00:11.969
这个分量在不同

00:00:11.970 --> 00:00:15.300
光照条件下变化最大

00:00:15.300 --> 00:00:18.600
H 或色调通道在阴影或高亮度条件下

00:00:18.600 --> 00:00:21.179
非常稳定 如果我们主要依赖于

00:00:21.179 --> 00:00:23.939
这个通道 并丢弃 V 通道中的信息

00:00:23.940 --> 00:00:26.310
我们就能比 RGB 颜色空间更可靠地探测彩色对象

00:00:26.309 --> 00:00:31.140
比如 这里的绿色屏幕背景

00:00:31.140 --> 00:00:32.280
因此 在这个笔记本中

00:00:32.280 --> 00:00:36.230
我已经导入了常用资源 并读入了一幅 RGB 图像

00:00:36.229 --> 00:00:38.924
绿色屏幕的汽车图像 但这次

00:00:38.924 --> 00:00:43.304
亮度不均匀 带有阴影区域和亮度不同的区域

00:00:43.304 --> 00:00:45.630
我想遮罩这个绿色区域

00:00:45.630 --> 00:00:50.370
看看在 RGB 和 HSV 颜色空间中 是哪些通道起作用

00:00:50.369 --> 00:00:53.729
现在 这幅图像中每个像素都有代表位置的 x 和 y 值

00:00:53.729 --> 00:00:57.294
以及代表代表颜色的 RGB 值

00:00:57.295 --> 00:01:01.914
我首先要做的 是重建 RGB 阈值 这个之前学习过

00:01:01.914 --> 00:01:03.719
我们再过一遍

00:01:03.719 --> 00:01:07.875
我在 RGB 颜色空间中创建了绿色的下限和上限阈值

00:01:07.875 --> 00:01:11.969
使用 cv2.inRange 创建一个遮罩 然后

00:01:11.969 --> 00:01:16.361
遮盖遮罩面积不等于 0 的图像部分 即白色区域

00:01:16.361 --> 00:01:18.060
接下来 显示图像

00:01:18.060 --> 00:01:22.025
这里 我们使用的阈值和前一个案例中完全相同

00:01:22.025 --> 00:01:23.490
只是这次 你可以看到

00:01:23.489 --> 00:01:24.800
由于阴影的存在

00:01:24.801 --> 00:01:28.090
它只遮盖了一半的绿色屏幕背景

00:01:28.090 --> 00:01:31.930
我们看看 HSV 颜色空间是不是效果更好

00:01:31.930 --> 00:01:37.995
首先 我需要把图像转换为 HSV 颜色空间 或使用 OpenCV 的 cvtColor 函数

00:01:37.995 --> 00:01:43.454
这是一个色彩转换函数 我使用 RGB 到 HSV 的转换代码

00:01:43.454 --> 00:01:45.704
这样会返回一个转换后的图像

00:01:45.704 --> 00:01:47.539
我把它叫做 HSV

00:01:47.540 --> 00:01:51.675
然后 我把每个色彩通道都隔离开 方便可视化

00:01:51.674 --> 00:01:53.334
要隔离色调通道

00:01:53.334 --> 00:01:54.944
我只需代入图像阵列

00:01:54.944 --> 00:01:58.941
代入阵列前两列的 x 和 y 值

00:01:58.941 --> 00:02:03.750
然后是第三列的 0 索引 代表每个像素的色调

00:02:03.750 --> 00:02:05.760
类似地 对于饱和度和明度 (value)

00:02:05.760 --> 00:02:09.090
我打入图像像素的所有 x 和 y 坐标

00:02:09.090 --> 00:02:12.004
然后取第三列的第一个和第二个索引

00:02:12.004 --> 00:02:15.127
得到每个像素的饱和度和明度值

00:02:15.127 --> 00:02:17.280
然后在灰阶中绘制每个彩色通道

00:02:17.280 --> 00:02:20.490
查看它们的相对色饱和度

00:02:20.490 --> 00:02:23.890
这里是灰阶色饱和度表示的三个通道

00:02:23.889 --> 00:02:27.089
像素越亮 代表色调值

00:02:27.090 --> 00:02:31.425
饱和度、明度的值越高 我们可以看到 即便在阴影部分

00:02:31.425 --> 00:02:33.460
色调水平仍然非常一致

00:02:33.460 --> 00:02:38.780
但饱和度和明度分量变化很大 尤其是阴影部分

00:02:38.780 --> 00:02:42.390
现在 你已经知道了如何创建色彩阈值并遮罩图像

00:02:42.389 --> 00:02:45.691
接下来 你需要使用这些信息

00:02:45.692 --> 00:02:49.430
以及你的 HSV 知识来遮罩这幅图像

00:02:49.430 --> 00:02:51.075
我不会告诉你我的具体值

00:02:51.074 --> 00:02:54.689
但的确使用了 HSV 颜色空间的色调通道

00:02:54.689 --> 00:02:59.000
遮罩了这幅图像的绿色背景 你应该也能得出类似结果

