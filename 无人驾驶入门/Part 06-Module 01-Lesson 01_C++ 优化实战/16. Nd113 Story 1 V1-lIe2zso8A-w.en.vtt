WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.345
So now that you suffer through all these wonderful things like,

00:00:03.345 --> 00:00:05.393
pointers, and memory allocations.

00:00:05.392 --> 00:00:06.990
So, let me tell you the story of

00:00:06.990 --> 00:00:11.129
the worst self-driving car bucket I ever caused and had to fix.

00:00:11.130 --> 00:00:12.990
Took me many months to find it.

00:00:12.990 --> 00:00:16.710
Okay. So we are, now back in 2005 driving Stanley,

00:00:16.710 --> 00:00:18.855
the self-driving car, through the Mojave Desert.

00:00:18.855 --> 00:00:23.327
And initially, we had one computer on board, and he was fine.

00:00:23.327 --> 00:00:25.020
And then the computer was overloaded,

00:00:25.018 --> 00:00:26.724
so we put a second computer on board.

00:00:26.725 --> 00:00:28.605
And as a result,

00:00:28.605 --> 00:00:31.504
as we found out every 40 miles,

00:00:31.504 --> 00:00:35.393
the robot would see a fake wall of obstacle in front of it,

00:00:35.395 --> 00:00:38.220
engage in a crazy, crazy swerve,

00:00:38.219 --> 00:00:41.649
and almost kill us, but felt like killing us.

00:00:41.649 --> 00:00:44.533
And then we had to intervene and take over.

00:00:44.533 --> 00:00:47.039
And we knew the race was about 120 miles long.

00:00:47.039 --> 00:00:49.975
So every 40 miles the robot would do this, we would not finish the race.

00:00:49.975 --> 00:00:51.774
So what was it?

00:00:51.774 --> 00:00:53.969
So you're looking at the robot advance a mile,

00:00:53.969 --> 00:00:56.320
it could be there and fine, and second, it doesn't.

00:00:56.320 --> 00:00:58.020
And we were flabbergasted.

00:00:58.020 --> 00:00:59.985
What ended up being is,

00:00:59.984 --> 00:01:06.239
we had put in a timer for how all the data is.

00:01:06.239 --> 00:01:09.409
They would give us a bound on how big an obstacle is.

00:01:09.409 --> 00:01:11.364
Let's take this for granted for now.

00:01:11.364 --> 00:01:13.259
In moving to two computers,

00:01:13.260 --> 00:01:16.230
we found that the clocks ran different speeds.

00:01:16.230 --> 00:01:17.969
Pretty common in many two computers.

00:01:17.968 --> 00:01:19.619
And we installed computer software,

00:01:19.620 --> 00:01:22.560
C++, to synchronize these clocks.

00:01:22.560 --> 00:01:24.120
And every one so often,

00:01:24.120 --> 00:01:27.480
the synchronization would set a clock value back.

00:01:27.480 --> 00:01:30.390
Now a test that would be contingent on the time

00:01:30.390 --> 00:01:34.784
elapsed would not have a negative number because timeless was negative.

00:01:34.784 --> 00:01:39.899
And that in conjunction with the vehicle bumping up and down over

00:01:39.900 --> 00:01:45.188
a little hump caused a fake obstacle.

00:01:45.188 --> 00:01:47.347
Now, that was brutal.

00:01:47.346 --> 00:01:49.414
It took us literally months to find it.

00:01:49.415 --> 00:01:51.325
And we drove every day,

00:01:51.325 --> 00:01:53.965
and every 40 miles or so we got this effect,

00:01:53.965 --> 00:01:56.439
and we couldn't figure out what's going on.

00:01:56.438 --> 00:01:58.375
Now, I'm telling you this story because,

00:01:58.375 --> 00:02:01.239
when you dive and become a software engineer,

00:02:01.239 --> 00:02:02.709
every little detail matters.

00:02:02.709 --> 00:02:06.489
And you have to understand how memory allocation works,

00:02:06.489 --> 00:02:09.628
how pointers work, how data structures work,

00:02:09.628 --> 00:02:10.959
because if you don't,

00:02:10.960 --> 00:02:13.180
and you allocate memory twice,

00:02:13.180 --> 00:02:15.145
or you forget to free it,

00:02:15.145 --> 00:02:19.344
at some point, you're self-driving car will fatally commit suicide, okay?

00:02:19.343 --> 00:02:21.348
So, thanks for sticking with us,

00:02:21.348 --> 00:02:24.000
and I hope you appreciate we just learned.

